<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F09%2F09%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>Diary</category>
      </categories>
      <tags>
        <tag>Testing</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux 内存寻址]]></title>
    <url>%2F2017%2F09%2F09%2FLinux-%E5%86%85%E5%AD%98%E5%AF%BB%E5%9D%80%2F</url>
    <content type="text"><![CDATA[内存地址分类逻辑地址：机器语言指令中用来指定一个操作数或一条指令的地址。每一个逻辑地址都由一个段（segment）和偏移量（offset或displacement）组成，偏移量指明了从段开始的地方到实际地址之间的距离。 线性地址（或 虚拟地址）：一个32位（或64位）无符号整数，在32位系统中可以用来表示高达4GB（0x0000 0000 —— 0xffff ffff）的地址，也就是高达 4 * 1024 * 1024 * 1024个内存单元（字节）。 物理地址（physical address）：芯片级内存单元寻址。与从微处理器的地址引脚发送到内存总线上的电信号相对应。物理地址由32位或36位（开启PAE）无符号整数表示。 内存管理单元（MMU）通过分段单元（segmentation unit）把逻辑地址转换成线性地址；然后，通过分页单元（paging unit）把线性地址转换成物理地址。分段单元和分页单元都是一种硬件电路。 硬件中的分段段选择符和段寄存器逻辑地址由两部分组成：段选择符和指定段内相对地址的偏移量。段选择符（Segment Selector）是一个16位长的字段，而偏移量是一个32位长的字段。 字段名 描述 索引 指定了放在GDT或LDT中的相应段描述符 TI TI（Table Indicator）标志，指明段描述符是在GDT中（TI=0）或在LDT中（TI=1） RPL 请求者特权级，当相应的段选择符装入到cs寄存器中时指示出CPU当前的特权级，它还可以用于在访问数据段时有选择地削弱处理器的特权级 处理器提供段寄存器来存放段选择符以保证查找段选择符的效率。这些段寄存器称为cs, ss, ds, es, fs和gs。程序可以把同一个段寄存器用于不同的目的：先将其值保存在内存中，用完后再恢复。6个段寄存器中3个有专门的用途： cs 代码段寄存器，指向包含程序指令的段。 ss 栈段寄存器，指向包含当前程序栈的段。 ds 数据段寄存器，指向包含静态数据或者全局数据段（初始化数据）。 其他3个段寄存器作一般用途，可以指向任意的数据段。cs寄存器还有一个很重要的功能：它含有一个 两位的字段，用以指明CPU的 当前特权级(Current Privilege Level, CPL)。0代表最高优先级——内核态，而3代表最低优先级——用户态。 段描述符每个段由一个 8字节（64 bit） 的段描述符（Segment Descriptor）表示，它描述了段的特征。段描述符放在全局描述符表（Global Descriptor Table, GDT）或局部描述符表（Local Descriptor Table, LDT）中。GDT在主存中的地址和大小存放在gdtr控制寄存器中，当前正被使用的LDT地址和大小放在ldtr控制寄存器中。 字段名 描述 基地址（Base） 包含段的首字节的线性地址 （32 bit） G 粒度标志；置0，则段大小以字节为单位，否则以4096字节的倍数计 Limit 最大段偏移量，段的长度（20 bit）。如果G被置为0，则一个段的大小在1个字节到1MB之间变化；否则，将在4KB到4GB之间变化 S 系统标志；置0，系统段，存储诸如LDT这种关键的数据结构，否则它是一个普通的代码段或数据段 Type 描述了段的类型特征和它的存取权限 DPL 描述符特权级（Descriptor Privilege Level）字段；用于限制对这个段的存取。表示访问这个段要求的CPU最小的优先级 P Segment-Present标志；为0表示段当前不在主存中。Linux总是把这个标志（第47位）设为1，因为它从来不把整个段交换到磁盘上去 D或B 取决于是代码段还是数据段 AVL 操作系统使用，但被Linux忽略 为加速逻辑地址到线性地址的转换，80x86处理器提供一种附加的非编程的寄存器（不能被编程者设置的寄存器），供6个可编程的段寄存器使用。每一个非编程的寄存器含有8个字节的段描述符，由相应的段寄存器中的段选择符来指定。每当一个段选择符被装入段寄存器时，相应的段描述符就由内存装入到对应的非编程CPU寄存器。之后，针对那个段的逻辑地址转换就可以不访问主存中的GDT或LDT，处理器只需直接引用存放段描述符的CPU寄存器即可。仅当段寄存器的内容改变时，才有必要访问GDT或LDT。 分段单元下图显示一个逻辑地址转换的详细过程，分段单元（segmentation unit）执行以下操作： 先检查段选择符的TI字段，以决定段描述符保存在哪一个描述符表中。GDT中，分段单元从gdtr寄存器得到GDT的线性基地址；LDT中，分段单元从ldtr寄存器得到LDT的线性基地址。 从段选择符的index字段计算段描述符的地址，index字段的值乘以8（一个段描述符的大小），这个结果与gdtr或ldtr寄存器中的内容相加。 把逻辑地址的偏移量与段描述符Base字段的值相加就得到了线性地址。 有了与段寄存器相关的不可编程寄存器，只有当段寄存器的内容被改变时才需要执行前两个操作。 Linux中的分段2.6版的Linux只有在x86结构下才需要分段。 运行在用户态的所有Linux进程都使用一对相同的段来对指令和数据寻址。这两个段就是所谓的用户代码段和用户数据段。类似地，运行在内核态的所有Linux进程都使用一对相同的段对指令和数据寻址：内核代码段和内核数据段。 下表显示了这4个重要段的段描述符字段的值： 段 Base G Limit S Type DPL D/B p 用户代码段 0x0000 0000 1 0xfffff 1 10 3 1 1 用户数据段 0x0000 0000 1 0xfffff 1 2 3 1 1 内核代码段 0x0000 0000 1 0xfffff 1 10 0 1 1 内核数据段 0x0000 0000 1 0xfffff 1 2 0 1 1 G为1，粒度为4KB，Limit为 0xfffff，则空间为 4GB 相应的段选择符由宏定义。 1__USER_CS、__USER_DS、__KERNEL_CS、__KERNEL_DS 为了对内核代码段寻址，内核只需把__KERNEL_CS宏产生的值装进cs段寄存器即可。 注意，与段相关的线性地址从0开始，达到2^23 - 1的寻址限长。这就意味着在用户态或内核态下的所有进程可以使用相同的逻辑地址。 所有段都从0x0000 0000 开始，那么，在Linux下逻辑地址与线性地址是一致的，即逻辑地址的偏移量字段的值与相应的线性地址的值总是一致的。 当对指向指令或者数据结构的指针进行保存时，内核不需要为其设置逻辑地址的段选择符，因为cs寄存器就含有当前的段选择符。例如，当内核调用一个函数时，它执行一条call汇编语言指令，该指令仅指定其逻辑地址的偏移量部分，而段选择符不用设置，它已经隐含在cs寄存器中了。因为“在内核态执行”的段只有一种，叫做代码段，由宏KERNEL_CS定义，所以只要当CPU切换到内核态时将KERNEL_CS装载进cs就足够了。同样的道理也适用于指向内核数据结构的指针(隐含地使用ds寄存器)以及指向用户数据结构的指针(内核显式地使用es寄存器)。 Linux GDT在单处理器系统中只有一个GDT，而在多处理器系统中每个CPU对应一个GDT。所有的GDT都存放在cpu_gdt_table数组中，而所有GDT的地址和它们的大小(当初始化gdtr寄存器时使用)被存放在cpu_gdt_descr数组中。这些符号都在文件arch/i386/kernel/head.S中被定义。 下图是GDT的布局示意图。每个GDT包含18个段描述符和14个空的，未使用的，或保留的项。插入未使用的项的目的是为了使经常一起访问的描述符能够处于同一个32字节的硬件高速缓存行中。 每一个GDT中包含的18个段描述符指同下列的段： 用户态和内核态下的代码段和数据段，共4个。 任务状态段（TSS），每个处理器有1个。每个TSS相应的线性地址空间都是内核数据段相应线性地址空间的一个小子集。所有的任务状态段都顺序地存放在init_tss数组中，值得特别说明的是，第n个CPU的TSS描述符的Base字段指向init_tss数组的第n个元素。G(粒度)标志被清0，而Limit字段置为0xeb, 因为TSS段是236字节长。Type字段置为9或11(可用的32位TSS)，且DPL置 为0，因为不允许用户态下的进程访问TSS段。 1个包括缺省局部描述符表的段，这个段通常被所有进程共享。 3个局部线程存储（Thread-Local Storage, TLS）段：这种机制允许多线程应用程序使用最多3个局部于线程的数据段。系统使用set_thread_area()和get_thread_area()分别为正在执行的进程创建和撤销一个TLS段。 与高级电源管理（APM）相关的3个段：由于BIOS代码使用段，所以当Linux APM驱动程序调用BIOS函数来获取或者设置APM设备的状态时，就可以使用自定义的代码段和数据段。 与支持即插即用（PnP）功能的BIOS服务程序相关的5个段。 被内核用来处理“双重错误”异常（处理一个异常时可能会引发另一个异常）的特殊TSS段。 系统中每个处理器都有一个GDT副本。除少数几种情况外，所有GDT的副本都存放相同的表项： 每个处理器都有它自己的TSS段。 GDT中只有少数项可能依赖于CPU正在执行的进程（LDT和TLS段描述符）。 在某些情况下，处理器可能临时修改GDT副本里的某个项，例如，当调用APM的BIOS例程时就会发生这种情况。 Linux LDT大多数用户态下的Linux程序不使用局部描述符表，因此内核就定义了一个缺省的LDT供大多数进程共享。缺省的局部描述符表存放在default_ldt数组中。它包含5个项，但内核仅仅有效地使用了其中的两个项：用于iBCS执行文件的调用门和Solaris/x86可执行文件的调用门。调用门是80x86微处理器提供的一种机制，用于在调用预定义函数时改变CPU的特权级（参考Intel文档以获取更多详情）。 硬件中的分页分页单元(paging unit)把线性地址转换成物理地址。其中的一个关键任务是把所请求的访问类型与线性地址的访问权限相比较，如果这次内存访问是无效的，就产生一个缺页异常。 为了效率起见，线性地址被分成以固定长度为单位的组，称为页（page）。页内部连续的线性地址被映射到连续的物理地址中。这样，内核可以指定一个页的物理地址和其存取权限，而不用指定页所包含的全部线性地址的存取权限。我们遵循通常习惯，使用术语“页”既指一组线性地址，又指包含在这组地址中的数据。 分页单元把所有的RAM分成固定长度的叶框（page frame）（也叫做物理页）。每一个叶框包含一个页，也就是说叶框的长度与一个页的长度一致。页框是主存的一部分，因此也是一个存储区域。区分一页和一个页框是很重要的，前者只是一个数据块，可以存放在任何页框或磁盘中。 把线性地址映射到物理地址的数据结构称为页表(page table )。页表存放在主存中，并在启用分页单元之前必须由内核对页表进行适当的初始化。 从80386开始，所有的80x86处理器都支持分页，它通过设置cr0寄存器的PG标志启用。当PG=0时，线性地址就被解释成物理地址。&lt;需要了解控制寄存器(cr0~cr3)的结构及作用&gt; 常规分页从80386起，Intel处理器的分页单元处理4KB的页。32位的线性地址被分成3个域： Directory（目录）：最高10位 Table（页表）：中间10位 Offset（偏移量）：最低12位 线性地址的转换分两步完成，每一步都基于一种转换表，第一种转换表称为页目录表(page directory)，第二种转换表称为页表(page table )。 页目录 及 页表都分别存放在1个页中（4KB），其中每个表项也都是4个字节。 使用这种二级模式的目的在于减少每个进程页表所需RAM的数量。如果使用简单的一级页表，那将需要高达2^20个表项(4GB/4KB = 2^20 ，也就是，在每项4个字节时，需要4MB RAM)来表示每个进程的页表(如果进程使用全部4GB线性地址空间)，即使一个进程并不使用那个范围内的所有地址。二级模式通过只为进程实际使用的那些“虚拟内存区”请求页表来减少内存容量。 每个活动进程必须有一个分配给它的页目录。不过，没有必要马上为进程的所有页表都分配RAM。只有在进程实际需要一个页表时才给该页表分配RAM会更为有效率。 正在使用的页目录的物理地址存放在控制寄存器cr3中。 页目录项和页表项有相同的结构，每项都包含下面的字段： 字段 描述 Present标志 置为1，所指的页（或页表）就在主存中；为0，则这一页不在主存，此时这个表项剩余的位可由操作系统用于自己的目的。如果只需一个地址转换所需的页表项或页目录项中Present标志被清0，那么分页单元就把该线性地址存放在控制寄存器cr2中，并产生14号异常：缺页异常。 包含页框物理地址最高20位的字段 由于每一个页框有4KB的容量，它的物理地址必须是4096的倍数，因此物理地址的最低12位总是为0。若这个字段指向一个页目录，相应的页框就含有一个页表，若指向一个页表，相应的页框就含有一页数据。 Accessed标志 每当分页单元对相应页框进行寻址时就设置这个标志。当选中的页被交换出去时，这一标志由操作系统使用。分页单元从来不重置这个标志，而是必须由操作系统去做。 Dirty标志 只应用于页表项中。每当对一个页框进行写操作时就设置这个标志。与Accessed标志一样，“当选中…………系统去做”。 Read/Write标志 含有页或页表的存取权限。 User/Supervisor标志 含有访问页或页表所需的特权级。 PCD和PWT标志 控制硬件高速缓存处理页或页表的方式。 Page Size标志 只应用于页目录项。置为1，则页目录指的是2MB或4MB的页框。 Global标志 只应用于页表项。这个标志是在Pentium Pro中引入的，用来防止常用页从TLB（俗称“快表”）高速缓存中刷新出去。只有在cr4寄存器的页全局启用（Page Global Enable, PGE）标志置位时这个标志才起作用。 扩展分页从Pentium模型开始，80x86微处理器引入了扩展分页（extended paging），它允许页框大小为4MB而不是4KB。扩展分页用于把大段连续的线性地址转换成相应的物理地址，在这些情况下，内核可以不用中间页表进行地址转换，从而节省内存并保留TLB项。 通过设置页目录项的Page Size标志启用扩展分页功能。分页单元吧32位线性地址分成两个字段： Directory：最高10位 Offset：其余22位 扩展分页和正常分页的目录项基本相同，除了： Page Size标志必须被设置。 32位物理地址字段只有最高10位是有意义的。这是因为每一个物理地址都是在以4MB为边界的地方开始的，故这个地址的最低22位为0。 通过设置cr4处理器寄存器的PSE标志能使扩展分页与常规分页共存。 硬件保护方案分页单元和分段单元的保护方案不同。尽管x86处理器允许一个段使用4种可能的特权级别，但与页和页表相关的特权级只有两个，因为特权由User/Supervisor标志所控制。若这个标志为0，只有当CPL小于3(这意味着对于Linux而言，处理器处于内核态)时才能对页寻址。若该标志为1，则总能对页寻址。 此外，与段的3种存取权限（读、写、执行）不同的是，页的存取权限只有两种（度、写）。如果页目录项或页表项的Read/Write标志等于0，说明相应的页表或页是只读的，否则是可读写的。 物理地址扩展（PAE）分页机制处理器所支持的RAM容量受连接到地址总线上的地址管脚数限制。早期Intel处理器从80386到Pentium使用32位物理地址。从理论上讲，这样的系统上可以安装高达4GB的RAM；而实际上，由于用户进程线性地址空间的需要，内核不能直接对1GB以上的RAM进行寻址。 然而，大型服务器需要大于4GB的RAM来同时运行数以千计的进程，所以必须扩展32位x86结构所支持的RAM容量。Intel通过在它的处理器上把管脚数从32增加到36已经满足了这些需求。寻址能力可达到2^36 = 64GB。不过，只有引入一种新的分页机制把32位线性地址转换为36位物理地址才能使用所增加的物理地址。 从Pentium Pro处理器开始，Intel引入一种叫做 物理地址扩展（Physical Address Extension, PAE）的机制。另外一种叫做页大小扩展[Page Size Extension (PSE-36)]的机制在Pentium 3处理器中引入，但是Linux并没有采用这种机制。 通过设置cr4控制寄存器中的物理地址扩展（PAE）标志激活PAE。页目录项中的页大小标志PS启用大尺寸页(在PAE启用时为2MB)。 Intel为了支持PAE改变了分页机制： 64GB的RAM被分为2^24个页框（4KB），页表项的物理地址字段从20位扩展到了24位。因为PAE页表项必须包含12个标志位(在前面已描述)和24个物理地址位，总数之和为36，页表项大小从32位变为64位增加了一倍。结果，一个4KB的页表包含512个表项而不是1024个表项。 引入一个叫做页目录指针表(Page Directory Pointer Table, PDPT)的页表新级别，它由4个64位表项组成。 cr3控制寄存器包含一个27位的页目录指针表(PDPT)基地址字段。因为PDPT存放在RAM的前4GB中，并在32字节(25)的倍数上对齐，因此27位足以表示这种表的基地址。 当把线性地址映射到4KB的页时(页目录项中的PS标志清0), 32位线性地址按下列方式解释： cr3：指向一个PDPT 位31-30：指向PDPT中4个项中的一个 位29-21：指向页目录中512个项目中的一个 位20-12：指向页表中512项中的一个 位11-0：4KB页中的偏移量 当把线性地址映射到2MB的页时(页目录项中的PS标志置为1), 32位线性地址按下列方式解释： cr3：指向一个PDPT 位31-30：指向PDPT中4个项中的一个 位29-21：指向页目录中512个项中的一个 位20-0：2MB页中的偏移量 总之，一旦cr3被设置，就可能寻址高达4GB RAM。如果我们希望对更多的RAM寻址，就必须在cr3中放置一个新值，或改变PDPT的内容。然而，使用PAE的主要问题是线性地址仍然是32位长。这就迫使内核编程人员用同一线性地址映射不同的RAM区。很明显，PAE并没有扩大进程的线性地址空间，因为它只处理物理地址。此外，只有内核能够修改进程的页表，所以在用户态下运行的进程不能使用大于4GB的物理地址空间。另一方面，PAE允许内核使用容量高达64GB的RAM，从而显著增加了系统中的进程数量。 64位系统中的分页 平台名称 页大小 寻址使用的位数 分页级别数 线性地址分级 alpha 8KB 43 3 10+10+10+13 ia64 4KB 39 3 9+9+9+12 ppc64 4KB 41 3 10+10+9+12 sh64 4KB 41 3 10+10+9+12 x86_64 4KB 48 4 9+9+9+9+12 转换后援缓冲器（TLB）x86处理器包含了一个称为转换后援缓冲器或TLB(Translation Lookaside Buffer)的高速缓存用于加快线性地址的转换。当一个线性地址被第一次使用时，通过慢速访问RAM中的页表计算出相应的物理地址。同时，物理地址被存放在一个TLB表项(TLB entry)中，以便以后对同一个线性地址的引用可以快速地得到转换。 在多处理系统中，每个CPU都有自己的TLB，叫做该CPU的本地TLB。 当CPU的cr3控制寄存器被修改时，硬件自动使本地TLB中的所有项都无效，这是因为新的一组页表被启用而TLB指向的是旧数据。 Linux中的分页Linux采用了一种同时适用于32位和64位系统的普通分页模型。从2.6.11版本开始，采用了四级分页模型。下图中展示的4种页表分别被为： 页全局目录(Page Global Directory ) 页上级目录(Page Upper Directory ) 页中级目录(Page Middle Directory ) 页表(Page Table) 对于没有启用物理地址扩展的32位系统，两级页表已经足够了。Linux通过使“页上级目录”位和“页中间目录”位全为0，从根本上取消了页上级目录和页中间目录字段。不过，页上级目录和页中间目录在指针序列中的位置被保留，以便同样的代码在32位系统和64位系统下都能使用。内核为页上级目录和页中间目录保留了一个位置，这是通过把它们的页目录项数设置为1，并把这两个目录项映射到页全局目录的一个适当的目录项而实现的。 启用了物理地址扩展（PAE）的32位系统使用了三级页表。Linux的页全局目录对应x86的页目录指针表(PDPT)，取消了页上级目录，页中间目录对应x86的页目录，Linux的页表对应x86的页表。 最后，64位系统使用二级还是四级分页取决于硬件对线性地址的位的划分。 Linux的进程处理很大程度上依赖于分页。事实上，线性地址到物理地址的自动转换使下面的设计目标变得可行： 给每一个进程分配一块不同的物理地址空间，这确保了可以有效地防止寻址错误。 区别页(即一组数据)和页框(即主存中的物理地址)之不同。这就允许存放在某个页框中的一个页，然后保存到磁盘上，以后重新装入这同一页时又可以被装在不同的页框中。这就是虚拟内存机制的基本要素。 每个进程有它自己的页全局目录和自己的页表集。当发生进程切换时，Linux把cr3控制寄存器的内存保存在前一个执行进程的描述符中，然后把下一个要执行进程的描述符的值装入cr3寄存器中。因此，当新进程重新开始在CPU上执行时，分页单元指向一组正确的页表。 物理内存布局可参考 地址空间布局 在初始化阶段，内核必须建立一个物理地址映射来指定哪些物理地址范围对内核可用而哪些不可用。 内核将下列页框记为保留： 在不可用的物理地址范围内的页框。 含有内核代码和已初始化的数据结构的页框。 保留页框中的页绝不能被动态分配或交换到磁盘上。 一般来说，Linux内核安装在RAM中从物理地址0x00100000开始的地方，也就是说，从第二个MB开始。所需页框总数依赖干内核的配置方案：典型的配置所得到的内核可以被安装在小于3MB的RAM中。 为什么内核没有安装在RAM第一个MB开始的地方?因为PC体系结构有几个独特的地方必须考虑到。例如： 页框0由BIOS使用，存放加电自检(Power-On Self-Test, POST)期间检查到的系统硬件配置。 物理地址从0x000a0000到0x000fffff的范围通常留给BIOS例程，并且映射ISA图形卡上的内部内存。这个区域就是所有IBM兼容PC上从640KB到1MB之间著名的洞：物理地址存在但被保留，对应的页框不能由操作系统使用。 第一个MB内的其他页框可能由特定计算机模型保留。例如，IBM Thinkpnd把0xa0页框映射到0x9f页框。 在启动过程的早期阶段，内核询问BIOS并了解物理内存的大小。在新近的计算机中，内核也调用BIOS过程建立一组物理地址范围和其对应的内存类型。 随后，内核执行machine_specific_memory_setup()函数，该函数建立物理地址映射。当然，如果这张表是可获取的，那是内核在BIOS列表的基础上构建的。否则，内核按保守的缺省设置构建这张表：从0x9f000(LOWMEMSIZE())到0x100000(HIGH_MEMORY)号的所有页框都标记为保留。 开始 结束 类型 0x0000 0000 0x0009 ffff Usable 0x000f 0000 0x000f ffff Reserved 0x0010 0000 0x07fe ffff Usable 0x07ff 0000 0x07ff 2ffff ACPI data 0x07ff 3000 0x07ff ffff ACPI NVS 0xffff 0000 0xffff ffff Reserved 上表显示了具有128MB(0x0800 0000) RAM计算机的典型配置。从0x07ff 0000到0x07ff 2fff 的物理地址范围中存有加电自检(POST)阶段由BIOS写入的系统硬件设备信息。在初始化阶段，内核把这些信息拷贝到一个合适的内核数据结构中，然后认为这些页框是可用的。相反，从0x07ff3000到0x07ff ffff的物理地址范围被映射到硬件设备的ROM芯片。从0xffff 0000开始的物理地址范围标记为保留，因为它由硬件映射到BIOS的ROM芯片。注意BIOS也许并不提供一些物理地址范围的信息(在上述表中，范围是0x000a 0000到0x000e ffff)。为安全可靠起见，Linux假定这样的范围是不可用的。 内核可能不会见到BIOS报告的所有物理内存：例如，如果未使用PAE支持来编译，即使有更大的物理内存可供使用，内核也只能寻址4GB大小的RAM。setup_memory()函数在machine_specific_memory_setup()执行后被调用：它分析物理内存区域表并初始化一些变量来描述内核的物理内存布局。 为了避免把内核装入一组不连续的页框里，Linux更愿跳过RAM的第一个MB。明确地说，Linux用PC体系结构未保留的页框来动态存放所分配的页。下图显示了Linux怎样填充前3MB的RAM： 符号_text对应于物理地址0x0010 0000 （16MB），表示内核代码第一个字节的地址。内核代码的结束位代由另外一个类似的符号_etext表示。内核数据分为两组：初始化过的数据的和没有初始化的数据。初始化过的数据在_etext后开始，在_edata处结束。紧接着是未初始化的数据并以_end结束。 图中出现的符号并没有在Linux源代码中定义，它们是编译内核时产生的（可以在System.map文件中找到这些符号，System.map是编译内核以后所创建的）。 进程页表进程的线性地址空间分成两部分： 从0x0000 0000——0xbfff ffff的线性地址，无论进程运行在用户态还是内核态都可以寻址（0—3GB）。 从0xc000 0000——0xffff ffff的线性地址，只有内核的进程才能寻址。 进程运行在用户态时，所产生的线性地址小于0xc000 0000，而运行在内核态时，执行内核代码，所产生的地址大于等于0xc000 0000。但是，在某些情况下，内核为了检索或存放数据必须访问用户态线性地址空间。 宏PAGE_OFFSET产生的值是0xc000 0000，这就是进程在线性地址空间中的偏移量，也是内核生存空间的开始之处。 内核页表内核维持着一组自己使用的页表，驻留在所谓的主内核页全局目录(master kernel Page Global Directory)中。系统初始化后，这组页表还从未被任何进程或任何内核线程直接使用；更确切地说，主内核页全局目录的最高目录项部分作为参考模型，为系统中每个普通进程对应的页全局目录项提供参考模型。 内核初始化自己的页表，这个过程分为两个阶段。事实上，内核映像刚刚被装入内存后，CPU仍然运行于实模式，所以分页功能没有被启用。 第一个阶段，内核创建一个有限的地址空间，包括内核的代码段和数据段、初始页表和用于存放动态数据结构的共128KB大小的空间。这个最小限度的地址空间仅够将内核装入RAM和对其初始化的核心数据结构。 第二个阶段，内核充分利用剩余的RAM并适当地建立分页表。下一节解释这个方案是怎样实施的。 临时内核页表临时页全局目录是在内核编译过程中静态地初始化的，而临时页表是由startup_32()汇编语言函数(定义于arch/i386/kernel/head.S)初始化的。不再过多提及页上级目录和页中间目录，因为它们相当于页全局目录项。在这个阶段PAE支持并未激活。 临时页全局目录放在swapper_pg_dir变量中。临时页表在pg0变量处开始存放，紧接在内核未初始化的数据段(_end符号)后面。为简单起见，我们假设内核使用的段、临时页表和128KB的内存范围能容纳于RAM前8MB空间里。为了映射RAM前8MB的空间，需要用到两个页表。 分页第一个阶段的目标是允许在实模式下和保护模式下都能很容易地对这8MB寻址。因此，内核必须创建一个映射，把从0x0000 0000到0x007f ffff的线性地址和从0xc000 0000到0xc07f ffff的线性地址映射到从0x0000 0000到0x007f ffff的物理地址。换句话说，内核在初始化的第一阶段，可以通过与物理地址相同的线性地址或者通过从0xc000 0000开始的8MB线性地址对RAM的前8MB进行寻址。 内核通过把swapper_pg_dir所有项都填充为0来创建期望的映射，不过，0、1、0x300(十进制768)和0x301(十进制769)这四项除外。后两项包含了从0xc000 0000到0xc07f ffff间的所有线性地址。0、1、0x300和0x301按以下方式初始化： 0项和0x300项的地址字段置为pg0的物理地址，而1项和0x301项的地址字段 置为紧随pg0后的页框的物理地址。 把这四个项中的Present、Read/Write和User/Supervisor标志置位。 把这四个项中的Accessed、Dirty、PCD、PWD和Page Size标志清0。 汇编语言函数startup_32()也启用分页单元，通过向cr3控制寄存器装入swapper_pg_dir的地址及设置cr0控制寄存器的PG标志来达到这一目的。下面是等价的代码片段： 12345movl $swapper_pg_dir-0xc0000000,%eaxmovl %eax,%cr3 /*设置页表指针*/movl %cr0,%eaxorl $0x80000000,%eaxmovl %eax,%cr0 /*设置分页(PG)位“/]]></content>
      <categories>
        <category>Linux内核</category>
      </categories>
      <tags>
        <tag>内存寻址</tag>
        <tag>分段</tag>
        <tag>分页</tag>
        <tag>GDT</tag>
        <tag>LDT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[处理器发展的两种处理模式：实模式和保护模式]]></title>
    <url>%2F2017%2F09%2F09%2F%E5%A4%84%E7%90%86%E5%99%A8%E5%8F%91%E5%B1%95%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%A4%84%E7%90%86%E6%A8%A1%E5%BC%8F%EF%BC%9A%E5%AE%9E%E6%A8%A1%E5%BC%8F%E5%92%8C%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[Intel从80286开始引入保护模式，并与之前已存在的实模式并存。作为CPU运行的两种工作方式，具体有何区别，本文对其做简要说明。 实模式80286之前，处理器的内部数据总线、外部数据总线及位宽都是16位，但地址总线（物理引脚）为20位。因此它的可访问物理地址空间为 1MB（2^20字节）。 但是，由于其数据总线及位宽都是16位，最大只能代表有64KB的空间，小于地址总线能代表的1MB空间。为了解决这个问题，设计人员通过用16位的段寄存器内容左移4位，并和16位的段内偏移相加组成的20位代表1MB空间：物理地址 = (段寄存器内容 &lt;&lt; 4) + 段内偏移。 通过这种方式能表示的内存地址最大范围即为：0xfff &lt;&lt; 4 + 0xffff = 0x10 ffef。已大于1MB，为使地址正常访问，对已得地址对1MB取模，此方法称为 wrap-around。 现代处理器地址总线数已远超20，但是为了向下兼容，系统刚加电时依旧使用实模式。 保护模式实模式带来了一些问题，主要是物理地址可见带来的无法保证地址空间的安全性问题：不区分系统程序及用户程序，用户可随意更改处于物理内存的敏感数据，极易导致系统崩溃。因此引入保护模式。 以现在32位处理器为例：内部数据总线、外部数据总线、位宽及地址总线都为32位。 处于保护模式时，寻址方式发生些许改变：由逻辑地址转换为物理地址（开启分页时，中间需通过线性地址进行转换，本文不开启分页）。 逻辑地址由 16位段选择符和32位偏移量组成。段选择符格式如下图： 字段名 描述 索引 指定了放在GDT或LDT中的相应段描述符的入口 TI TI（Table Indicator）标志，指明段描述符是在GDT中（TI=0）或在LDT中（TI=1） RPL 请求者特权级，当相应的段选择符装入到cs寄存器中时指示出CPU当前的特权级，它还可以用于在访问数据段时有选择地削弱处理器的特权级 索引指向存放在GDT（Global Descriptor Table，全局描述符表）或LDT（Local Descriptor Table，局部描述符表）中的段描述符，而段描述符中会存放段基地址，将得到的段基地址与逻辑地址中的段偏移量相加即得物理内存地址。 总结实模式中内存被划分成段，每个段的大小为64KB，而这样的段地址可以用16位来表示。内存段的处理是通过和段寄存器相关联的内部机制来处理的，这些段寄存器（CS、DS、 SS和ES）的内容形成了物理地址的一部分。具体来说，最终的物理地址是由16位的段寄存器和16位的段内偏移地址组成的。 在保护模式下，段是通过一系列被称之为“描述符表”的表所定义的。段寄存器存储的段选择符，指向GDT或LDT中的位置。]]></content>
      <categories>
        <category>处理器工作方式</category>
      </categories>
      <tags>
        <tag>实模式</tag>
        <tag>保护模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CPU 寄存器]]></title>
    <url>%2F2017%2F09%2F09%2FCPU-%E5%AF%84%E5%AD%98%E5%99%A8%2F</url>
    <content type="text"><![CDATA[寄存器是中央处理器内的组成部分，是有限存贮容量的高速存贮部件，它们可用来暂存指令、数据和地址。在中央处理器的控制部件中，包含的寄存器有指令寄存器(IR)和程序计数器(PC)。 寄存器是集成电路中非常重要的一种存储单元，通常由D触发器组成。在集成电路设计中，寄存器可分为电路内部使用的寄存器和充当内外部接口的寄存器这两类。内部寄存器不能被外部电路或软件访问，只是为内部电路的实现存储功能或满足电路的时序要求。而接口寄存器可以同时被内部电路和外部电路或软件访问，CPU中的寄存器就是其中一种，作为软硬件的接口，为广泛的通用编程用户所熟知。 寄存器拥有非常高的读写速度，所以在寄存器之间的数据传送非常快。寄存器是内存阶层中的最顶端，也是系统获得操作资料的最快速途径。寄存器通常都是以他们可以保存的位元数量来估量，举例来说，一个“8位元寄存器”或“32位元寄存器”。 16位寄存器以8086（16位处理器，14个寄存器）为例。按其用途可分为： 通用寄存器（8个）： 数据寄存器 AH&amp;AL=AX(accumulator)：累加寄存器，常用于运算；在乘除等指令中指定用来存放操作数，另外,所有的I/O指令都使用这一寄存器与外界设备传送数据。 BH&amp;BL=BX(base)：基址寄存器，常用于地址索引。 CH&amp;CL=CX(count)：计数寄存器，常用于计数，常用于保存计算值。如在移位指令,循环(loop)和串处理指令中用作隐含的计数器。 DH&amp;DL=DX(data)：数据寄存器，常用于数据传递。 这4个16位的寄存器可以分为高8位：AH，BH，CH，DH。以及低八位：AL，BL，CL，DL。这2组8位寄存器可以分别寻址，并单独使用。 指针寄存器和变址寄存器： SP（Stack Pointer）：堆栈指针，与SS配合使用，可指向目前的堆栈位置。BP（Base Pointer）：基址指针寄存器，可用作SS的一个相对基址位置。SI（Source Index）：源变址寄存器，可用来存放相对于DS段之源变址指针。DI（Destination Index）：目的变址寄存器，可用来存放相对于ES 段之目的变址指针。 这4个16位寄存器只能按16位进行存取操作，主要用来形成操作数的地址，用于堆栈操作和变址运算中计算操作数的有效地址。 指令指针（1个）： 指令指针IP是一个16位专用寄存器，它指向当前需要取出的指令字节，当BIU从内存中取出一个指令字节后，IP就自动加(取出该字节的长度，如：BIU从内存中取出的是1个字节，IP就会自动加1，如果BIU从内存中取出的字节数长度为3，IP就自动加3)，指向下一个指令字节。注意，IP指向的是指令地址的段内地址偏移量，又称偏移地址(Offset Address)或有效地址(EA，Effective Address)。 BIU是80x86微处理系统芯片中的两个基本功能部件之一，中文为总线接口部件（Bus Interface Unit）。BIU是和总线打交道的接口部件，它根据执行单元(Execution Unit)的请求，执行8086 CPU 对存储器或 I/O 接口的总线操作，完成数据传送，BIU由指令队列缓冲器，16位指令指针寄存器CS、DS、SS和ES，地址产生器和段寄存器，总线控制逻辑等部分构成。 标志寄存器（1个）： 标志寄存器（Flags Register,FR）又称程序状态字(Program Status Word,PSW)。这是一个存放条件标志、控制标志寄存器，主要用于反映处理器的状态和运算结果的某些特征及控制指令的执行。 在FR中有意义的有9位，其中6位是状态位，3位是控制位。 标志 描述 CF(carry flag) 进位标志，主要用来反映无符号数运算是否产生进位或借位。如果运算结果的最高位产生了一个进位或借位，那么，其值为1，否则其值为0。 PF(parity flag) 奇偶标志，用于反映运算结果中“1”的个数的奇偶性。如果“1”的个数为偶数，则PF的值为1，否则其值为0。 AF(adjust flag) 辅助进位标志，存在下列情况值被置为1，否则其值为0：在字操作时，发生低字节向高字节进位或借位时；在字节操作时，发生低4位向高4位进位或借位时。 ZF(zero flag) 零标志，用来反映运算结果是否为0。如果运算结果为0，则其值为1，否则其值为0。在判断运算结果是否为0时，可使用此标志位。 SF(sign flag) 符号标志，用来反映运算结果的符号位，它与运算结果的最高位相同。在微机系统中，有符号数采用补码表示法，所以，SF也就反映运算结果的正负号。运算结果为非负数时，SF的值为0，否则其值为1。当运算结果没有产生溢出时，运算结果等于逻辑结果（即应该得到的正确的结果），此时SF表示的是逻辑结果的正负，当运算结果产生溢出时，运算结果不等于逻辑结果，此时的SF值所表示的正负情况与逻辑结果相反，即：SF=0时，逻辑结果为负，SF=1时，逻辑结果为非负。 TF(trap flag) 跟踪标志，可用于程序调试。TF标志没有专门的指令来设置或清除。如果TF=1，则CPU处于单步执行指令的工作方式，此时每执行完一条指令，就显示CPU内各个寄存器的当前值及CPU将要执行的下一条指令。如果TF=0，则处于连续工作模式。 IF(interrupt enable flag) 中断允许标志，用来决定CPU是否响应CPU外部的可屏蔽中断发出的中断请求。但不管该标志为何值，CPU都必须响应CPU外部的不可屏蔽中断所发出的中断请求，以及CPU内部产生的中断请求。具体规定如下：当IF=1时，CPU可以响应CPU外部的可屏蔽中断发出的中断请求；当IF=0时，CPU不响应CPU外部的可屏蔽中断发出的中断请求。 DF(direction flag) 方向标志，用来决定在串操作指令执行时有关指针寄存器发生调整的方向。 OF(overflow flag) 溢出标志，用于反映有符号数加减运算所得结果是否溢出。如果运算结果超过当前运算位数所能表示的范围，则称为溢出，OF的值被置为1，否则，OF的值被清为0。 段寄存器（4个）： CS（Code Segment）：代码段寄存器 DS（Data Segment）：数据段寄存器 SS（Stack Segment）：堆栈段寄存器 ES（Extra Segment）：附加段寄存器 当一个程序要执行时，就要决定程序代码、数据和堆栈各要用到内存的哪些位置，通过设定段寄存器CS，DS，SS来指向这些起始位置。通常是将DS固定，而根据需要修改CS。所以，程序可以在可寻 址空间小于64K的情况下被写成任意大小。所以，程序和其数据组合起来的大小，限制在DS所指的64K内，这就是COM文件不得大于64K的原因。8086以内存作为战场，用寄存器做为军事基地，以加速工作。 备注：由于所讲的是16位cpu，IP寄存器的位数为16，即：偏移地址为16位，2的16次幂就是64K，所以16位段地址不能超过64K，超过64K会造成64K以上的地址找不到。 32位寄存器32位CPU 寄存器及数据结构图： 通用寄存器（8个）：EAX、EBX、ECX、EDX、ESP、EBP、ESI、EDI 尽管这8个通用寄存器大多时候是通用的，可以用作任何用途，但是在某些情况下，他们也有隐含的用法。比如ECX、ESI和EDI在串循环操作中分别用作计数器、源和目标。EBP和ESP主要用来维护栈，ESP通常指向栈的顶部，EBP指向当前栈帧的起始地址。 EAX, EBX, ECX, EDX都可以作为32位寄存器、16位寄存器或者8位寄存器使用。用法类似16位数据寄存器。 EBP和ESP是32位寄存器，也可作为16位寄存器BP, SP使用，常用于椎栈操作。 EDI和ESI常用于串操作，EDI用于寻址目标数据串，ESI用于寻址源数据串。 标志寄存器（1个）：EFLAGS 控制任务状态和模式切换、中断处理、指令追踪和访问权限控制.寄存器中的标志位需要特权指令代码才可以修改(特权指令:运行在内核态下的代码) 在16位标志寄存器的基础上增加了几个标志： 标志 描述 IOPL(I/O privilege level field) 指示当前运行任务的I/O特权级(I/O privilege level)，正在运行任务的当前特权级(CPL)必须小于或等于I/O特权级才能允许访问I/O地址空间。这个域只能在CPL为0时才能通过POPF以及IRET指令修改。 NT(Nested task flag) 控制中断链和被调用任务。若当前任务与前一个执行任务相关则置1，反之则清零。 RF(Resume flag) 控制处理器对调试异常的响应。 VM(Virtual-8086 mode flag) 置1以允许虚拟8086模式，清除则返回保护模式。 AC(Alignment check flag) 该标志以及在CR0寄存器中的AM位置1时将允许内存引用的对齐检查，以上两个标志中至少有一个被清零则禁用对齐检查。 VIF(Virtual interrupt flag) 该标志是IF标志的虚拟镜像(Virtual image)，与VIP标志结合起来使用。使用这个标志以及VIP标志，并设置CR4控制寄存器中的VME标志就可以允许虚拟模式扩展(virtual mode extensions) VIP(Virtual interrupt pending flag) 该位置1以指示一个中断正在被挂起，当没有中断挂起时该位清零。(Software sets and clears this flag; the processor only reads it)与VIF标志结合使用。 ID(Identification flag) 程序能够设置或清除这个标志指示了处理器对CPUID指令的支持。 控制寄存器（5个）：CR0-CR4 控制寄存器决定处理器的操作模式和当前执行任务的一些特征。 CR0：控制系统的工作模式和处理器的状态；x86_32的CR0为32bit。X86_64下为64bit，其中低32bit与x86_32的CR0保持一致，高32bit没有定义，作保留使用，除了bit4其他所有位都是可读可写的。 标志 描述 PE(Protected-Mode Enable) PE=0，表示CPU处于实模式；PE=1表CPU处于保护模式，并使用分段机制。 MP 协处理器监视标志位 EM 该位表明是否需要仿真协处理器的功能 TS 每当任务切换时就设置该位，并且在解释协处理器指令之前测试该位 ET 扩展类型。设置有效位时，支持 ntel 387 DX 数学协处理器指令 NE 数字错误标志位(与浮点协处理器共同使用) WP 写保护 AM 对齐功能屏蔽(与EFLAGS寄存器中 AC标志位一同使用) NW 直写无效(直写：高速缓存中的数据始终保持与主存储器中数据匹配，也叫做通写 ) CD cache 缺失设置位 PG(Paging Enable) 控制分页机制，PG=1，启动分页机制；PG=0,不使用分页机制。 CR1：保留 CR2：存放发生页错误时的虚拟地址 CR3：用来存放最高级页目录地址(物理地址），各级页表项中存放的也是物理地址。 标志 描述 PWT(Page-Level Writethrough) 控制cache采取直写还是回写的策略。当设置清空时，回写有效。当置位时，直写有效 PCD(Page-Level Cache Disable) PCD=1，表示最高目录表不可缓存，PCD=0，相反 Figure 3-4中，不使用PAE技术，有两层页表。最高层为页目录有1024项，占用4KB。page_directory_table base address为物理地址，指向4KB对齐的页目录地址。 Figure 3-5中，使用PAE技术，三层页表寻址。最高层为页目录指针，4项，占用32B空间。所以 page_directory_table base address为27位，指向32B对齐的页目录指针表。 CR4：一些结构的扩展。表明对于特定的处理器和操作系统执行支持。 标志 描述 VME(virtual 8086 mode extension) 虚拟8086模式扩展位。VME=1，允许虚拟8086扩展，即允许8086模式和虚拟8086中断。VME=0，禁止虚拟8086模式扩展。 PVI(protected mode virtual interrupts) 保护模式虚拟中断位。PVI=1，允许保护模式虚拟中断。PVI=0，禁止保护模式虚拟中断。 TSD(time stamp disable) 禁止RDTSC指令位。TSD=0，则允许RDTSC（读时间标志计算器）指令在任何特权级上执行。TSD=1，仅允许RDTSC指令在0级特权级上执行，否则将发生一般保护模式异常。 DE(debugging extensions) 调试扩展位。DE=1，允许输入/输出断点。DE=0，不支持输入/输出断点。 PSE(page size extensions) 允许页容量大小扩展位。PSE=1，允许每页容量为4MB。PSE=0，只允许每页容量为4KB。 PAE(physical address extension) 允许物理地址扩展位。PAE=1，允许采用32位以上的物理地址（包括32位和64位地址）。PAE=0，只允许采用32位物理地址。 MCE(machine check exception) 允许机器检查异常位。MCE=1，允许机器检查异常。MCE=0，不允许机器检查异常。 PGE(Page-Global Enable) 将PGE设置为1可启用全局页面机制。将该位清除为0将禁用该机制。当启用PGE时，系统软件可以将页面转换层级的最低级别的全局页面（G）位设置为1，表示页面翻译是全局的。当页面翻译表基地址（CR3）更新时，标记为全局的页面翻译在TLB中不会失效。 PCE(Performance-Monitoring Counter Enable) 将PCE设置为1允许在任何权限级别运行的软件使用RDPMC指令。软件使用RDPMC指令读取性能监视MSRs PerfCtrn。 将PCE清除为0仅允许最特权的软件（CPL = 0）使用RDPMC指令。 OSFXSR(FXSAVE/FXRSTOR Support) 设置为1，以使能256位和128位媒体指令。当该位设置为1时，它还指示系统软件使用FXSAVE和FXRSTOR指令来保存和恢复x87,64位介质和128位介质指令的处理器状态。 OSXMMEXCPT(Unmasked Exception Support) 当系统软件支持SIMD浮点异常（#XF）来处理未屏蔽的256位和128位媒体浮点错误时，系统软件必须将OSXMMEXCPT位设置为1。将OSXMMEXCPT位清除为0表示不支持#XF处理程序。 当OSXMMEXCPT = 0时，未屏蔽的128位媒体浮点异常会导致无效操作码异常 OSXSAVE(XSAVE and Extended States) 设置为1，则操作系统支持XGETBV，XSETBV，XSAVE和XRSTOR指令。处理器也将能够执行XGETBV和XSETBV指令，以读写XCR0。 调试寄存器（8个）：DR0-DR7 调试寄存器主要作用是调试应用代码、系统代码、开发多任务操作系统.来监视代码的运行和处理器的性能。 DR0-DR3：保留32位断点的线性地址。 DR4-DR5：保留。 DR6： 标志 描述 B0-B3 断点状态的监测 BD 调试寄存器访问监测。置位，表明在指令流中，下一条指令将访问其中的一个调试寄存器 BS 单步执行标志位 BT 任务转换标志位 DR7： 标志 描述 L0-L3 局部断点使能标志位 G0-G3 全局断点使能标志位 LE GE 置位，表明处理器可以监测导致数据断点的指令。推荐置位为1 GD 通用监测使能标志位。表明是否开启调试寄存器保护 LEN0 - LEN3 用来表明相应断点地址寄存器内存位置的大小 R/W0 - R/W3 相应断点的状态 系统地址寄存器（4个）：GDTR、IDTR、LDTR和TR GDTR：全局描述符表寄存器，是一个48位寄存器，用来存放全局描述符表GDT的32位线性基地址和16位的界限值。在全局描述符表中不仅包括有操作系统使用的描述符，而且还有所有任务使用的公用描述符。 IDTR：中断描述符表寄存器，是一个48位寄存器，用来存放中断描述符表IDT的32位线性基地址和16位的界限值。 LDTR：局部描述符表寄存器，是一个16位寄存器，用来存放局部描述符表LDT的16位选择符。另外还有一个隐含的描述符高速缓冲寄存器，用来存放LDT表描述符。 TR：任务状态寄存器，是一个16位寄存器，用来存放任务状态段TSS的16位选择符。与之相应，也有一个隐含的描述符高速缓冲寄存器，用来存放任务状态段TSS的描述符。 16位段寄存器（6个）：CS、DS、ES、FS、GS、SS 段寄存器有两部分，一部分是编程可见的选择器寄存器，为6个16位寄存器，对应在另一部分有6个64位的描述符寄存器，后一部分是编程不可见的。 在实地址方式或虚拟8086方式，描述符寄存器不起作用，选择器寄存器退化成16位CPU的段寄存器功能，存放内存段的段基址——段首地址的高16位，其中CS对应于代码段、SS对应于堆栈段，DS对应于数据段，ES对应于附加数据段，在串操作时，DS和ES分别对应于源数据段和目的数据段。FS和GS没有定义。 其他寄存器：EIP、TSC等 指令指针指示器–EIP 32位寄存器，低16位称为IP，用与兼容16位CPU，其内容是下一条要取入CPU的指令在内存中的偏移地址。当一个程序开始运行时，系统把EIP清零，每取入一条指令，EPI自动增加取入CPU的字节数目。所以称EIP为指令指针。 时间戳寄存器–TSC 每个时钟周期时其值加1，重启时清零。通过RDTSC指令读取TSC寄存器，只有当CR4寄存器的TSD位为0时，才可以在任何优先级下执行该指令，否则只能在特权级下执行该指令。 浮点寄存器 由于在80486微处理器内部设有浮点运算器，因此在其内部有相应的寄存器，其中包括8个80位通用数据寄存器、1个48位指令指针寄存器、1个48位数据指针寄存器、1个16位控制字寄存器、1个16位状态字寄存器和1个16位标记字寄存器。 主要技术重命名技术：寄存器重命名，是CPU在解码过程中对寄存器进行重命名，解码器把“其它”的寄存器名字变为“通用”的寄存器名字，本质上是通过一个表格把x86寄存器重新映射到其它寄存器，这样可以让实际使用到的寄存器远大于8个。这样做的好处除了便于前面指令发生意外或分支预测出错时取消外，还避免了由于两条指令写同一个寄存器时的等待。 乱序执行技术：采用乱序执行技术使CPU内部电路满负荷运转并相应提高了CPU运行程序的速度。类似多个CPU同步执行。 特点寄存器又分为内部寄存器与外部寄存器，所谓内部寄存器，其实也是一些小的存储单元，也能存储数据。但同存储器相比，寄存器又有自己独有的特点： 寄存器位于CPU内部，数量很少，仅十四个 寄存器所能存储的数据位数根据处理器类型不同而不同（8bit、16bit及32bit） 每个内部寄存器都有一个名字，而没有类似存储器的地址编号 参考资料80X86寄存器详解 寄存器（百度百科） Intel X86 CPU系列的寄存器 CR0-4寄存器介绍]]></content>
      <categories>
        <category>寄存器</category>
      </categories>
      <tags>
        <tag>寄存器</tag>
        <tag>CPU</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Intel CPU 发展简史]]></title>
    <url>%2F2017%2F09%2F09%2FIntel-CPU-%E5%8F%91%E5%B1%95%E7%AE%80%E5%8F%B2%2F</url>
    <content type="text"><![CDATA[1971年11月15日：40041971年11月15日，Intel公司的工程师霍夫发明了世界上第一个商用微处理器—4004。这款4位微处理器集成了2250个晶体管，晶体管之间的距离是10微米，能够处理4bit的数据，每秒运算6万次，频率为108KHz，前端总线为0.74MHz （4bit）。原为日本Busicom公司的计数器开发。 编号为4004，第一个“4”代表此芯片是客户订购的产品编号，后一个“4”代表此芯片是英特尔公司制作的第四个订制芯片，之前还有4001（动态内存DRAM）、4002（只读存储器ROM）、4003（Register），这种数字代号却延用至今。采用4004芯片后，再配用一块程序存储器，数据存储器，移位寄存器，再加上键盘和数码管，就构成了一台完整的微型计算机。 4004的最高频率有740kHz，能执行4位运算，支持8位指令集及12位地址集。 4004只能称为世界上第一款商用处理器，而不是世界上第一款微处理器。第一款微处理器应该是美国军方研制，用于F-14雄猫战机中由6颗晶片组成的中央空气数据计算机：CADC（CenterAir Data Computer），虽然它的构造比4004还要简单，速度只有9.15KHz。 1972年：80088008频率为200KHz，晶体管的总数已经达到了3500个，能处理8比特的数据，性能是4004的两倍，速度为200KHz。更为重要的是，英特尔还首次获得了处理器的指令技术。 8008芯片原本是为德克萨斯州的Datapoint公司设计的，但是这家公司最终却没有足够的财力支付这笔费用。于是双方达成协议，英特尔拥有这款芯片所有的知识产权，而且还获得了由Datapoint公司开发的指令集。这套指令集奠定了今天英特尔公司X86系列微处理器指令集的基础。 执行8位运算，支持16位地址总线和16位数据总线。 1974年：8080在微处理器发展初期，具有革新意义的芯片非Intel8080莫属了。由于采用了复杂的指令集以及40管脚封装，8080的处理能力大为提高，其功能是8008的10倍，每秒能执行29万条指令，集成晶体管数目6000，运行速度2MHz。 与此同时，微处理器的优势已经被业内人士所认同，于是更多的公司开始接入这一领域，竞争开始变得日益激烈。当时与英特尔同台竞技的有RCA(美国无线电公司)、Honeywell、Fairchild、美国国家半导体公司、AMD、摩托罗拉以及Zilog公司。值得一提的是Zilog，世界上第一块4004芯片的设计者Faggin就加盟了该公司。由该公司推出的Z80微处理器比Intel8080功能更为强大，而且直到今天这款处理器仍然被尊为经典。 8080有幸成为了第一款个人计算机Altair的大脑。 8位元处理器，拥有16位地址总线和8位数据总线，包含7个八位寄存器，支持16位寻址，同时也包含一些输入输出端口，有效解决了外部设备在内存寻址能力不足的问题。 1978年：8086-80881978年，英特尔推出了首枚16位微处理器8086，同时生产出与之配合的数学协处理器8087，这两种芯片使用相同的指令集，以后英特尔生产的处理器，均对其兼容。趁着市场销售正好的时机，以及市场需求的提升，Intel在同一年推出了性能更出色的8088处理器。三款处理器都拥有29000只晶体管，速度可分为5MHz、8MHz、10MHz，内部数据总线(处理器内部传输数据的总线)、外部数据总线(处理器外部传输数据的总线)均为16位，地址总线为20位，可寻址1MB内存。首次在商业市场给消费者提供了更自由选择。 1982年：8028680286(也称286)是处理器进入全新技术的标准产品，具备16位字长，集成了14.3万只晶体管，具有6MHz、8MHz、10MHz、12.5MHz四个主频的产品。286是Intel第一款具有完全兼容性的处理器，即可以运行所有针对其前代处理器编写的软件，这一软件兼容性也成为了Intel处理器家族一个恒久不变的特点。286是英特尔的最后一块16位处理器 最大主频为20MHz，采用16位数据总线和24位地址总线。 80286有两种工作模式：实模式和保护模式。在实模式下，80286直接访问内存的空间被限制在1M字节，更多内存需要通过EMS或XMS内存机制进行映射。而在保护模式下，80286可以直接访问16M字节的内存，并具有异常处理机制。 1985年：80386英特尔第一款32位处理器，集成了27万5千只晶体管，超过了4004芯片的一百倍，每秒可以处理500万条指令。同时也是第一款具有“多任务”功能的处理器，所谓“多任务”就是说它可以同时处理多个程序程序的指令，这对微软的操作系统发展有着重要的影响。 重要特点： 首次在x86处理器中实现了32位系统， 可配合使用80387数字辅助处理器增强浮点运算能力 首次采用高速缓存（外置）解决内存速度瓶颈问题。 由于这些设计，80386的运算速度达到了前代产品80286的数倍。80386DX的内部和外部数据总线（或资料汇流排）是32位，地址总线（或位址汇流排）也是32位，可以定址到4GB内存，并可以管理64TB的虚拟存储空间（虚拟存储空间：通过硬件和软件的综合来扩大用户可存储空间，它在内存储器和外存储器（磁盘、光盘）之间增加一定的硬件和软件支持，使两者形成一个有机整体，支持运行比实际配置的内存容量大的多的大任务程序）。 80386有三种工作模式：实模式、保护模式、虚拟86模式。真实模式为DOS系统的常用模式，直接内存访问空间被限制在1M字节（也叫做位元组）；保护模式下80386-DX可以直接访问4G位元组的内存，并具有异常处理机制；虚拟86模式可以同时模拟多个8086处理器来加强多工处理能力。 Intel RapidCAD 被遗忘的微处理器RapidCAD是英特尔有史以来第一款为旧款个人计算机所提供的升级套件(也就是OverDrive的始祖)。原386的使用者不需要更换主机板，只要把RapidCAD买回来将主机板上旧有的中央处理器芯片(CPU)替换掉，就可以享受接近486的运算能力。RapidCAD其实就是把486 DX芯片去掉内部高速缓存然后装入386的封装里面，RapidCAD也不支持486增加的新指令。不过由于386封装的频宽限制，RapidCAD对整体的效能提升比不上直接升级到486 DX。相同频率下，486 DX可以有比386/387快上两倍的速度，而RapidCAD在整数运算方面最多只能提升35%，在浮点运算方面，则可以提升将近70%。 Intel RapidCAD特殊的地方在于，它是由两颗芯片组成，缺一不可。这归咎于486 DX内建浮点运算器(FPU)，而386则是将浮点运算器分开(就是387)。由于RapidCAD-1本身就含有浮点运算器(因为它就是486 DX阉割版)，根本不需要387，所以RapidCAD-2就是用来替代原来主机板上的387芯片。RapidCAD-1负责所有的运算，而RapidCAD-2则是负责模拟浮点运算器，以防止旧有主机板以为没有安装浮点运算功能(尤其在执行286/287的程序时)。市面上有时候把RapidCAD-1与RapidCAD-2分开卖，这就是不了解RapidCAD运作方式的结果。 1989年：8048680486处理器集成了125万个晶体管，时钟频率由25MHz逐步提升到33MHz、40MHz、50MHz及后来的100MHz。486家族的指令集与386非常相似，只有增加少量的指令。 486处理器的应用意味着用户从此摆脱了命令形式的计算机，进入“选中并点击(point-and-click)”的计算时代。英特尔486处理器首次采用内建的数学协处理器，将负载的数学运算功能从中央处理器中分离出来，从而显著加快了计算速度。 386和486推向市场后，均大获成功，英特尔在芯片领域的霸主地位日益凸现。此后，英特尔开始告别微处理器数字编号时代，进入到了Pentium时代。 1994年3月10日：Intel Pentium中央处理器芯片1993年，英特尔发布了Pentium(俗称586)中央处理器芯片(CPU)。本来按照惯常的命名规律是80586，但是在486发展末期，就已经有公司将486等级的产品标识成586来销售了。因此英特尔决定使用自创的品牌来作为新产品的商标—Pentium。 英特尔奔腾处理器采用了0.60微米工艺技术制造，核心由320万个晶体管组成。支持计算机更轻松的集成“现实世界”数据，如语音、声音、手写体和图片等。 Pentium是x86系列一大革新。其中晶体管数大幅提高、增强了浮点运算功能、并把十年未变的工作电压降至3.3V。Pentium刚推出的时候拥有浮点数除法不正确的错误(FDIV Bug)，导致英特尔大量回收第一代产品(1994年12月之前的产品)，所以有FDIV Bug的微处理器所剩不多。Pentium 50MHz也有这个FDIV错误，不过A80501-50只是业界样本，从来没有在市场上出现过。 1995年3月27日，英特尔发布Pentium 120MHz处理器，采用了0.60微米/0.35两种工艺技术，不过核心依旧由320万个晶体管组成。 1995年6月，英特尔发布Pentium 133MHz处理器，采用0.35工艺技术制造,核心提升到由330万个晶体管组成。 1995年11月1日，英特尔发布Pentium 150MHz、Pentium 166MHz、Pentium 180MHz、Pentium 200MHz四款处理器，并且采用了0.60微米/0.35两种工艺技术,核心提升到由550万个晶体管组成。此时INTEL在以前设计基础上增加了L2 cache为256K和512K两种版本。 1996年1月4日，英特尔又发布Pentium 150MHz、Pentium 166MHz两款处理器，采用了0.35微米工艺技术,不过核心由330万个晶体管组成。 1996年6月10日，英特尔发布Pentium 200MHz处理器，采用了0.35微米工艺技术，不过核心还是由330万个晶体管组成。 1996年：Intel Pentium ProPentimuPro的内部含有高达550万个的晶体管，内部时钟频率为133MHz，处理速度几乎是100MHz的Pentium的2倍。PentimuPro的一级(片内)缓存为8KB指令和8KB数据。值得注意的是在PentimuPro的一个封装中除PentimuPro芯片外还包括有一个256KB的二级缓存芯片，两个芯片之间用高频宽的内部通讯总线互连，处理器与高速缓存的连接线路也被安置在该封装中，这样就使高速缓存能更容易地运行在更高的频率上。PentiumPro 200MHz CPU的L2 Cache就是运行在200MHz，也就是工作在与处理器相同的频率上。这样的设计领PentiumPro达到了最高的性能。而PentimuPro最引人注目的地方是它具有一项称为“动态执行”的创新技术，这是继Pentium在超标量体系结构上实现实破之后的又一次飞跃。PentimuPro系列的工作频率是150/166/180/200，一级缓存都是16KB，而前三者都有256KB的二级缓存，至于频率为200的CPU还分为三种版本，不同就在于他们的内置的缓存分别是256KB，512KB，1MB。 1997年1月：Intel Pentium MMXPentium MMX芯片在X86指令集的基础上加入了57条多媒体指令。这些指令专门用来处理视频、音频和图象数据，使CPU在多媒体操作上具有更强大的处理能力，Pentium MMX还使用了许多新技术。单指令多数据流SIMD技术能够用一个指令并行处理多个数据，缩短了CPU在处理视频、音频、图形和动画时用于运算的时间；流水线从5级增加到6级，一级高速缓存扩充为16K，一个用于数据高速缓存，另一个用于指令高速缓存，因而速度大大加快；Pentium MMX还吸收了其他CPU的优秀处理技术，如分支预测技术和返回堆栈技术。 Pentium MMX等于是Pentium的加强版中央处理器芯片(CPU)，除了增加67个MMX(Multi-Media eXtension)指令以及64位数据型态之外之外，也将内建指令及数据暂存(Cache)从之前的8KB增加到16KB，内部工作电压降到2.8V。而英特尔之后的桌上型中央处理器皆包含了MMX指令。 1997年：Intel Pentium OverdriveIntel Pentium OverDrive中央处理器芯片(CPU)，又是一项英特尔造福旧计算机使用者的升级选择。Pentium OverDrive有两种，一种(不含MMX，5V)是给80486升级用的，另一种(含MMX，3.3V)是给Pentium早期产品(Socket6, 50-66MHz)升级的。他们都有含散热器及风扇。 1997-1998年：Pentium II1997年5月7日，英特尔发布Pentium II 233MHz、Pentium II 266MHz、Pentium II 300MHz三款PII处理器，采用了0.35微米工艺技术，核心提升到750万个晶体管组成。采用SLOT1架构，通过单边插接卡(SEC)与主板相连，SEC卡盒将CPU内核和二级高速缓存封装在一起，二级高速缓存的工作速度是处理器内核工作速度的一半；处理器采用了与Pentium PRO相同的动态执行技术，可以加速软件的执行；通过双重独立总线与系统总线相连，可进行多重数据交换，提高系统性能；PentiumII也包含MMX指令集。Intel此举希望用SLOT1构架的专利将AMD等一棍打死，可没想到Socket 7平台在以AMD的K6-2为首的处理器的支持下，走入了另一个春天。而从此开始，Intel也开始走上了一条前途不明的道路，开始频繁的强行制定自己的标准，企图借此达到迅速挤垮竞争对手的目的，但市场与用户的需要使得Intel开始不断的陷入被动和不利的局面。 在这个时期100MHz频率的SDR内存已经出现在市场上，但是Intel却惊人地宣布他们将放弃并行内存而主推一种名为Rambus的内存，而一时间众多大公司如西门子、HP和DELL等都投入了Rambus的门下，不过后来DDR内存的流行也证明了Intel的失败。 1997年6月2日，英特尔发布MMX指令技术的Pentium II 233MHz处理器，采用了0.35微米工艺技术,核心由450万个晶体管组成。 1997年8月18日，英特尔发布L2 cache为1M的Pentium II 200MHz处理器，采用了0.35微米工艺技术,核心由550万个晶体管组成。 1998年1月26日，英特尔发布Pentium II 333MHz处理器，采用了0.35微米工艺技术，核心由750万个晶体管组成。 1998年4月15日，英特尔发布Pentium II 350MHz、Pentium II 400MHz和第一款Celeron 266MHz处理器，此三款CPU都采用了最新0.25微米工艺技术,核心由750万个晶体管组成。 1998年8月24日，英特尔发布Pentium II 450MHz处理器，采用了0.25微米工艺技术,核心由750万个晶体管组成。 CPU发展到这个时期，就不能不说说Intel Pentium II Cerelon处理器。英特尔将Celeron处理器的L2 Cache设定为只有Pentium II的一半(也就是128KB)，这样既有合理的效能，又有相对低廉的售价(有A字尾的)；这样的策略一直延续到今天。不过很快有人发现，使用双Celeron的系统与双Pentium II的系统差距不大，而价格却便宜很多，结果造成了Celeron冲击高阶市场的局面。后来英特尔决定取消Celeron处理器的SMP功能，才解决了这个问题。 Pentium II Celeron处理器Celeron（赛扬）300A，是一个让多少人闻之动容的产品，又陪伴了多少曾经年少的读者度过悠长的学生时代。赛扬300A，从某种意义上已经是Intel的第二代赛扬处理器。第一代的赛扬处理器仅仅拥有266MHz、300MHz两种版本，第一代的Celeron处理器由于不拥有任何的二级缓存，虽然有效的降低了成本，但是性能也无法让人满意。为了弥补性能上的不足，Intel终于首次推出带有二级缓存的赛扬处理器——采用Mendocino核心的Celeron300A、333、366。经典，从此诞生。 1999年：Intel Pentium III1999年2月26日，英特尔发布Pentium III 450MHz、Pentium III 500MHz处理器，同时采用了0.25微米工艺技术,核心由950万个晶体管组成，从此Intel开始踏上了PIII旅程。 Pentium III是给桌上型计算机的中央处理器芯片(CPU)，等于是Pentium II的加强版，新增七十条新指令(SIMD，SSE)。Pentium III与Pentium II一样有Mobile、Xeon以及Cerelon等不同的版本。Celeron系列与Pentium III最大的差距在于二级缓存，100MHz外频的Tualatin Celeron 1GHz可以轻松地跃上133MHz外频。更为重要的是，Tualatin Celeron还有很好的向下兼容性，甚至440BX主板在使用转接卡之后也有望采用该CPU，因此也成为很多升级用户的首选。 特别指出的是，Pentium III光是桌上型就拥有Katmai Slot 1 、Coppermine Slot 1以及Coppermine Socket 370等三种不同的系列。到后期，英特尔放弃插卡式界面而又回归到插槽界面(Socket 370)。socket370封装开始推出的时候，有一部分消费者舍弃了slot1平台而选择了新的处理器。新的PGA封装分为PPGA和FC-PGA两种，前者较为廉价，因而被赛扬处理器所采用，而更为昂贵的后者则被奔腾III处理器所采用。例外的是：采用Mendocino核心的赛扬处理器同时有这两种不同封装的版本。采用PPGA封装的赛扬处理器可以通过转接卡在slot1主板上使用，而采用FC-PGA封装的奔三处理器则无能为力了。 2000年：Intel Pentium IVPentium 4处理器集成了4200万个晶体管，到了改进版的Pentium 4(Northwood)更是集成了5千5百万个晶体管；并且开始采用0.18微米进行制造，初始速度就达到了1.5GHz。 Pentium 4还提供的SSE2指令集，这套指令集增加144个全新的指令，在128bit压缩的数据，在SSE时，仅能以4个单精度浮点值的形式来处理，而在SSE2指令集，该资料能采用多种数据结构来处理： 4个单精度浮点数(SSE)对应2个双精度浮点数(SSE2)，对应16字节数(SSE2)，对应8个字数(word)，对应4个双字数(SSE2)，对应2个四字数(SSE2)，对应1个128位长的整数(SSE2) 。 2002-2004年：超线程P4处理器2002年11月14日，英特尔在全新英特尔奔腾4处理器3.06GHz上推出其创新超线程(Hyper-Threading，HT)技术。超线程(HT)技术支持全新级别的高性能台式机，同时快速运行多个计算应用，或为采用多线程的单独软件程序提供更多性能。超线程(HT)技术可将电脑性能提升达25%。除了为台式机用户引入超线程(HT)技术外，英特尔在推出英特尔奔腾4处理器3.06GHZ时达到了一个电脑里程碑。这是第一款商用微处理器，运行速率为每秒30亿周期，并且采用当时业界最先进的0.13微米制程制作。 P4处理器3.06GHz2003年，英特尔发布前端总线为533MHz的Pentium 4 3.06GHz处理器，采用了0.13微米工艺技术,提供512K的二级缓存，核心由5500万个晶体管组成。 P4处理器至尊版3.20GHz2004年初发布，该处理器可兼容现有的英特尔865和英特尔875芯片组家族产品以及标准系统内存。2MB三级高速缓存可以预先加载图形帧缓冲区或视频帧，以满足处理器随后的要求，使在访问内存和I/O设备时实现更高的吞吐率和更快的帧带率。最终，这可带来更逼真的游戏效果和改进的视频编辑性能。增强的CPU性能还可支持软件厂商创建完善的软件物理引擎，从而带来栩栩如生的人物动作和人工智能，使电脑控制的人物更加形象、逼真。 半年之后，2004年6月，英特尔发布了P4 3.4GHz处理器，该处理器支持超线程(HT)技术，采用0.13微米制程，具备512KB二级高速缓存、2MB三级高速缓存和800MHz系统前端总线速度。 Northwood是第二代产品，采用0.13微米制程，具有电压低、体积小、温度低的优点。接着就是Prescott(0.09微米)，虽然这技术很新，不过由于效能提升并不明显，而且有过热的问题。后来英特尔又推出Hyper Threading技术，大大增加工作效率，让P4又成为市场宠儿。英特尔之后又推出Extreme Edition、含有Prestonia(原本给服务器用的Xeon核心)以及Gallatin(0.13微米Northwood外频提升改良版)核心的CPU。现在市场上的高阶Pentium 4则是Socket LGA 775的Prescott为主。 2005-2006年：双核处理器2005年4月，英特尔的第一款双核处理器平台包括采用英特尔955X高速芯片组、主频为3.2GHz的英特尔奔腾处理器至尊版840，此款产品的问世标志着一个新时代来临了。双核和多核处理器设计用于在一枚处理器中集成两个或多个完整执行内核，以支持同时管理多项活动。英特尔超线程(HT)技术能够使一个执行内核发挥两枚逻辑处理器的作用，因此与该技术结合使用时，英特尔奔腾处理器至尊版840能够充分利用以前可能被闲置的资源，同时处理四个软件线程。 英特尔奔腾D处理器5月，带有两个处理内核的英特尔奔腾D处理器随英特尔945高速芯片组家族一同推出，可带来某些消费电子产品的特性，例如：环绕立体声音频、高清晰度视频和增强图形功能。2006年1月，英特尔发布了Pentium D 9xx系列处理器，包括了支持VT虚拟化技术的Pentium D 960(3.60GHz)、950(3.40GHz)和不支持VT的Pentium D 945(3.4 GHz)、925(3GHz)(注：925不支持VT虚拟化技术)和915(2.80GHz)。 英特尔酷睿2双核处理器2006年7月，英特尔公司面向家用和商用个人电脑与笔记本电脑，发布了十款全新英特尔酷睿2双核处理器和英特尔酷睿至尊处理器。英特尔酷睿2双核处理器家族包括五款专门针对企业、家庭、工作站和玩家(如高端游戏玩家)而定制的台式机处理器，以及五款专门针对移动生活而定制的处理器。英特尔酷睿2双核处理器设计用于提供出色的能效表现，并更快速地运行多种复杂应用，支持用户改进各种任务的处理，例如：更流畅地观看和播放高清晰度视频；在电子商务交易过程中更好地保护电脑及其资产；以及提供更耐久的电池使用时间和更加纤巧时尚的笔记本电脑外形。 全新处理器可实现高达40%的性能提升，其能效比最出色的英特尔奔腾处理器高出40%。英特尔酷睿2双核处理器包含2.91亿个晶体管。不过，Pentium D谈不上是一套完美的双核架构，Intel只是将两个完全独立的CPU核心做在同一枚芯片上，通过同一条前端总线与芯片组相连。两个核心缺乏必要的协同和资源共享能力，而且还必须频繁地对二级缓存作同步化刷新动作，以避免两个核心的工作步调出问题。从这个意义上说，Pentium D带来的进步并没有人们预想得那么大！ 2011年：重新确定处理器产品架构2011年3月，使用32nm工艺全新桌面级和移动端处理器采用了i3、i5和i7的产品分级架构。其中i3主攻低端市场，采用双核处理器架构，约2MB二级缓存；i5处理器主攻主流市场，采用四核处理器架构，4MB二级缓存；i7主攻高端市场，采用四核八线程或六核十二线程架构，二级缓存不少于8MB。 2012年：发布22纳米工艺和第三代处理器使用22nm工艺的处理器热功耗普遍小于77W，使得处理器的散热需求大幅下降，提升了大规模数据运算的可靠性，并降低了散热功耗。 2014年：首发桌面级8核心16线程处理器2014年9月上市的i7-5960X处理器是第一款基于22nm工艺的八核心桌面级处理器，拥有高达20MB的三级缓存，主频达到3.5GHz，热功耗140W。此处理器的处理能力可谓超群，浮点数计算能力是普通办公电脑的10倍以上。随着这一“怪兽”处理器的问世，Intel公司在处理器领域与AMD的差距越拉越大，已经完全形成了一家独大的局面。 寻址空间发展表摘自 寻访x86处理器“实模式”和“保护模式”的前世今生 参考资料：Intel CPU发展简史 百度百科资料]]></content>
      <categories>
        <category>CPU发展史</category>
      </categories>
      <tags>
        <tag>CPU</tag>
        <tag>处理器</tag>
      </tags>
  </entry>
</search>
